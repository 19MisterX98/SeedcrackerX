import net.fabricmc.loom.task.RemapJarTask

plugins {
	id 'fabric-loom' version '1.0-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

sourceSets {
	api {
		java {
			compileClasspath += main.compileClasspath
		}
	}

	main {
		java {
			compileClasspath += api.output
			runtimeClasspath += api.output
		}
	}
}

repositories {
	maven { url "https://maven.terraformersmc.com/releases" }
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.latticg.com/" }
	maven { url "https://maven.seedfinding.com/" }
	maven { url "https://maven-snapshots.seedfinding.com/" }
	maven { url "https://jitpack.io" }
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	include("net.fabricmc.fabric-api:fabric-command-api-v2:${project.command_api_version}")
	include("net.fabricmc.fabric-api:fabric-api-base:${project.fabric_api_base}")
	include("net.fabricmc.fabric-api:fabric-resource-loader-v0:${project.resource_loader_version}")

	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	include("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}")

	modImplementation ("com.terraformersmc:modmenu:${project.modmenu_version}") {transitive = false}

	implementation('com.seedfinding:mc_math:ffd2edcfcc0d18147549c88cc7d8ec6cf21b5b91') { transitive = false }
	implementation('com.seedfinding:mc_seed:1ead6fcefe7e8de4b3d60cd6c4e993f1e8f33409') { transitive = false }
	implementation('com.seedfinding:mc_core:d64d5f90be66300da41ef58f4f1736db2499784f') { transitive = false }
	implementation('com.seedfinding:mc_noise:7e3ba65e181796c4a2a1c8881d840b2254b92962') { transitive = false }
	implementation('com.seedfinding:mc_biome:41a42cb9019a552598f12089059538853e18ec78') { transitive = false }
	implementation('com.seedfinding:mc_terrain:b4246cbd5880c4f8745ccb90e1b102bde3448126') { transitive = false }
	implementation('com.seedfinding:mc_feature:919b7e513cc1e87e029a9cd703fc4e2dc8686229') { transitive = false }
	implementation('com.seedfinding:mc_reversal:ca64c0890c106f1a2207623c316fce86f250b918') { transitive = false }

	implementation('com.seedfinding:latticg:1.06')

	include('com.seedfinding:mc_math:ffd2edcfcc0d18147549c88cc7d8ec6cf21b5b91') { transitive = false }
	include('com.seedfinding:mc_seed:1ead6fcefe7e8de4b3d60cd6c4e993f1e8f33409') { transitive = false }
	include('com.seedfinding:mc_core:d64d5f90be66300da41ef58f4f1736db2499784f') { transitive = false }
	include('com.seedfinding:mc_noise:7e3ba65e181796c4a2a1c8881d840b2254b92962') { transitive = false }
	include('com.seedfinding:mc_biome:41a42cb9019a552598f12089059538853e18ec78') { transitive = false }
	include('com.seedfinding:mc_terrain:b4246cbd5880c4f8745ccb90e1b102bde3448126') { transitive = false }
	include('com.seedfinding:mc_feature:919b7e513cc1e87e029a9cd703fc4e2dc8686229') { transitive = false }
	include('com.seedfinding:mc_reversal:ca64c0890c106f1a2207623c316fce86f250b918') { transitive = false }

	include('com.seedfinding:latticg:1.06')
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(AbstractArchiveTask) {
	reproducibleFileOrder = true
	preserveFileTimestamps = false
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

tasks.withType(Jar) {
	from "LICENSE.txt"
	from sourceSets.api.output
}

task apiJar(type: Jar) {
	classifier "api-dev"

	from sourceSets.api.output
}

task remapApiJar(type: RemapJarTask) {
	classifier "api"

	input = apiJar.archiveFile.get().asFile
	addNestedDependencies = false
}

prepareRemapApiJar.dependsOn(apiJar)

publishing {
	publications {
		def configurePom = {
			packaging 'jar'
			inceptionYear = '2021'
			licenses {
				license {
					name = 'MIT'
					url = 'https://github.com/19MisterX98/SeedcrackerX/blob/master/LICENSE.md'
				}
			}
			url = 'https://github.com/19MisterX98/SeedcrackerX'
			issueManagement {
				url = 'https://github.com/19MisterX98/SeedcrackerX/issues'
			}
			scm {
				url = 'https://github.com/19MisterX98/SeedcrackerX'
			}
			developers {
				developer {
					name = 'MisterX'
					id = '19MisterX98'
				}
				developer {
					name = 'Kap'
					id = 'KaptainWutax'
				}
			}
		}

		mod(MavenPublication) {
			artifactId 'seedcrackerx'
			artifact(remapJar) {
				builtBy remapJar
			}
			pom configurePom
			pom.name = 'seedcrackerx'
			pom.description = 'The seedcrackerx mod JAR'
		}
		api(MavenPublication) {
			artifactId 'seedcrackerx-api'
			artifact(remapApiJar) {
				builtBy remapApiJar
				classifier = ''
			}
			pom configurePom
			pom.name = 'seedcrackerx-api'
			pom.description = 'The seedcrackerx API'
		}
	}
	repositories {
		maven {
			def releasesRepoUrl = "https://jitpack.io/com/github/19MisterX98/SeedcrackerX/latest"
			def snapshotsRepoUrl = "https://jitpack.io/com/github/19MisterX98/SeedcrackerX/snapshots"
			url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
		}
	}
}

build.dependsOn remapApiJar