import net.fabricmc.loom.task.RemapJarTask

plugins {
	id 'dev.architectury.loom' version '0.11.0-SNAPSHOT'
	id 'maven-publish'
	id 'com.github.johnrengelman.shadow' version '7.1.2'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

configurations {
	// configuration that holds jars to include in the jar
	jarLibs
}

sourceSets {
	api {
		java {
			compileClasspath += main.compileClasspath
		}
	}

	main {
		java {
			compileClasspath += api.output
			runtimeClasspath += api.output
		}
	}
}

repositories {
	maven { url "https://maven.terraformersmc.com/releases" }
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.latticg.com/" }
	maven { url "https://maven.seedfinding.com/" }
	maven { url "https://maven-snapshots.seedfinding.com/" }
	maven { url "https://jitpack.io" }
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.minecraft_version}+${project.mappings_version}:v2"
	forge "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

	modApi ("me.shedaniel.cloth:cloth-config-forge:${project.cloth_config_version}")

	implementation('com.seedfinding:mc_math:0eb505174da8a92550f8ec6efe254e0fa936cc0d') { transitive = false }
	implementation('com.seedfinding:mc_seed:5518e3ba3ee567fb0b51c15958967f70a6a19e02') { transitive = false }
	implementation('com.seedfinding:mc_core:706e4f1b7aa6b42b3627f682a311d06280d80b5c') { transitive = false }
	implementation('com.seedfinding:mc_noise:a6ab8e6c688491829f8d2adf845392da22ef8e9c') { transitive = false }
	implementation('com.seedfinding:mc_biome:b2271807a047bb43ac60c8c20ad47e315f19b9a6') { transitive = false }
	implementation('com.seedfinding:mc_terrain:9e937ddb838e28e79423c287fa18b1ce66f061d7') { transitive = false }
	implementation('com.seedfinding:mc_feature:ef939c0dd7d66ab1bd290d6aab1e42a12cb3dbf1') { transitive = false }
	implementation('com.seedfinding:mc_reversal:2.0.0') { transitive = false }

	implementation('com.seedfinding:latticg:1.06')

	jarLibs ('com.seedfinding:mc_math:0eb505174da8a92550f8ec6efe254e0fa936cc0d') { transitive = false }
	jarLibs  ('com.seedfinding:mc_seed:5518e3ba3ee567fb0b51c15958967f70a6a19e02') { transitive = false }
	jarLibs  ('com.seedfinding:mc_core:706e4f1b7aa6b42b3627f682a311d06280d80b5c') { transitive = false }
	jarLibs  ('com.seedfinding:mc_noise:a6ab8e6c688491829f8d2adf845392da22ef8e9c') { transitive = false }
	jarLibs  ('com.seedfinding:mc_biome:b2271807a047bb43ac60c8c20ad47e315f19b9a6') { transitive = false }
	jarLibs  ('com.seedfinding:mc_terrain:9e937ddb838e28e79423c287fa18b1ce66f061d7') { transitive = false }
	jarLibs  ('com.seedfinding:mc_feature:ef939c0dd7d66ab1bd290d6aab1e42a12cb3dbf1') { transitive = false }
	jarLibs  ('com.seedfinding:mc_reversal:2.0.0') { transitive = false }

	jarLibs  ('com.seedfinding:latticg:1.06')
}

loom {
	forge {
		mixinConfigs = [
				"seedcracker.mixins.json"
		]
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("META-INF/mods.toml") {
		expand "version": project.version
	}
}

tasks.withType(AbstractArchiveTask) {
	reproducibleFileOrder = true
	preserveFileTimestamps = false
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

tasks.withType(Jar) {
	from "LICENSE.md"
	from sourceSets.api.output
}

tasks.jar {
	from {
		configurations.jarLibs.filter{ it.exists() && !it.name.contains("kotlin") && !it.name.contains("annotations") }.collect { it.isDirectory() ? it : zipTree(it) }
	}
}

task apiJar(type: Jar) {
	classifier "api-dev"
	destinationDirectory.set(file("$buildDir/devlibs"))
	from sourceSets.api.output
}

task remapApiJar(type: RemapJarTask, dependsOn: apiJar) {
	classifier "api"

	input = apiJar.archiveFile.get().asFile
	addNestedDependencies = false
}


publishing {
	publications {
		def configurePom = {
			packaging 'jar'
			inceptionYear = '2021'
			licenses {
				license {
					name = 'MIT'
					url = 'https://github.com/19MisterX98/SeedcrackerX/blob/master/LICENSE.md'
				}
			}
			url = 'https://github.com/19MisterX98/SeedcrackerX'
			issueManagement {
				url = 'https://github.com/19MisterX98/SeedcrackerX/issues'
			}
			scm {
				url = 'https://github.com/19MisterX98/SeedcrackerX'
			}
			developers {
				developer {
					name = 'MisterX'
					id = '19MisterX98'
				}
				developer {
					name = 'Kap'
					id = 'KaptainWutax'
				}
				developer {
					name = 'CanadianBacon'
					id = 'CanadianBacon'
				}
			}
		}

		mod(MavenPublication) {
			artifactId 'seedcrackerx'
			artifact(remapJar) {
				builtBy remapJar
			}
			pom configurePom
			pom.name = 'seedcrackerx'
			pom.description = 'The seedcrackerx mod JAR'
		}
		api(MavenPublication) {
			artifactId 'seedcrackerx-api'
			artifact(remapApiJar) {
				builtBy remapApiJar
				classifier = ''
			}
			pom configurePom
			pom.name = 'seedcrackerx-api'
			pom.description = 'The seedcrackerx API'
		}
	}
	repositories {
		maven {
			def releasesRepoUrl = "https://jitpack.io/com/github/19MisterX98/SeedcrackerX/latest"
			def snapshotsRepoUrl = "https://jitpack.io/com/github/19MisterX98/SeedcrackerX/snapshots"
			url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
		}
	}
}

prepareRemapApiJar.dependsOn apiJar
build.dependsOn remapApiJar