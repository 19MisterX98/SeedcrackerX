import net.fabricmc.loom.task.prod.ClientProductionRunTask

plugins {
	id 'fabric-loom' version "${loom_version}"
}

base {
	archivesName = project.archives_base_name
	version = project.mod_version
	group = project.maven_group
}

repositories {
	maven { url "https://maven.terraformersmc.com/releases" }
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.latticg.com/" }
	maven { url "https://maven.seedfinding.com/" }
	maven { url "https://maven-snapshots.seedfinding.com/" }
	maven { url "https://jitpack.io" }
	maven { url "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1" }
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

	include modImplementation(fabricApi.module("fabric-api-base", project.fabric_api_version))
	include modImplementation(fabricApi.module("fabric-transitive-access-wideners-v1", project.fabric_api_version))
	include modImplementation(fabricApi.module("fabric-command-api-v2", project.fabric_api_version))
	include modImplementation(fabricApi.module("fabric-rendering-v1", project.fabric_api_version))
	include modImplementation(fabricApi.module("fabric-resource-loader-v0", project.fabric_api_version))

	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	include("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}")

	modImplementation ("com.terraformersmc:modmenu:${project.modmenu_version}") {transitive = false}

	include implementation("com.seedfinding:mc_math:${project.seedfinding_math_version}") { transitive = false }
	include implementation("com.seedfinding:mc_seed:${project.seedfinding_seed_version}") { transitive = false }
	include implementation("com.seedfinding:mc_core:${project.seedfinding_core_version}") { transitive = false }
	include implementation("com.seedfinding:mc_noise:${project.seedfinding_noise_version}") { transitive = false }
	include implementation("com.seedfinding:mc_biome:${project.seedfinding_biome_version}") { transitive = false }
	include implementation("com.seedfinding:mc_terrain:${project.seedfinding_terrain_version}") { transitive = false }
	include implementation("com.seedfinding:mc_feature:${project.seedfinding_feature_version}") { transitive = false }
	include implementation("com.seedfinding:mc_reversal:${project.seedfinding_reversal_version}") { transitive = false }

	include implementation("com.seedfinding:latticg:${project.latticg_version}")

	modRuntimeOnly("me.djtheredstoner:DevAuth-fabric:${project.devauth_version}") {
		exclude group: 'net.fabricmc', module: 'fabric-loader'
	}
	productionRuntimeMods("me.djtheredstoner:DevAuth-fabric:${project.devauth_version}") {
		exclude group: 'net.fabricmc', module: 'fabric-loader'
	}
}

processResources {
	def props = [version: project.version, loader_version: project.loader_version]
	inputs.properties props
	filteringCharset "UTF-8"

	filesMatching("fabric.mod.json") {
		expand props
	}

	from("LICENSE") {
		rename {"${it}_${project.base.archivesName.get()}"}
	}
}

tasks.register("prodClient", ClientProductionRunTask) {
	runDir = file("run")

	jvmArgs.add("-Ddevauth.enabled=true")

	javaLauncher = javaToolchains.launcherFor {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}
